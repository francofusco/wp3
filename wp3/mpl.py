from .struct import Struct
import matplotlib.pyplot as plt


def toggle_tile_if_clicked(mouse_event, tile, axis):
    """Mouse callback to toggle visibility of a tile.

    This function is meant to be used as callback for matplotlib events, to
    allow showing/hiding a tile when clicked.

    Args:
        mouse_event: instance of matplotlib.backend_bases.MouseEvent. It should
            be generated by matplotlib itself when firing the event.
        tile: the Tile instance that should be shown/hidden.
        axis: the matplotlib.axes.Axes instance that contains the patches of
            this tile. It is needed to update the figure.
    """
    # Ignore events fired when the mouse is outside the drawing area.
    if mouse_event.xdata is None or mouse_event.ydata is None:
        return

    # Toggle the tile if the mouse is inside it.
    if tile.contains(mouse_event.xdata, mouse_event.ydata):
        tile.toggle_visible()
        axis.figure.canvas.draw()


def toggle_all_tiles(keyboard_event, tiles, axis):
    """Keyboard callback to toggle visibility of many tiles at once.

    This function is meant to be used as callback for matplotlib events, to
    allow showing/hiding a set of tiles when some keys are pressed.

    Controls:
    - Space bar: toggle each tile;
    - A: make all tile invisible;
    - CTRL+A: make all tiles visible.

    Args:
        keyboard_event: instance of matplotlib.backend_bases.KeyEvent. It should
            be generated by matplotlib itself when firing the event.
        tiles: list of Tile instances that should be shown/hidden.
        axis: the matplotlib.axes.Axes instance that contains the patches of
            the tiles. It is needed to update the figure.
    """
    # Give a name to the commands and exit if the corresponding keys were not
    # pressed.
    TOGGLE = " "
    HIDE = "a"
    SHOW = "ctrl+a"
    if keyboard_event.key not in [TOGGLE, SHOW, HIDE]:
        return

    # Change visibility of each tile depending on the given command.
    for tile in tiles:
        if keyboard_event.key == TOGGLE:
            tile.toggle_visible()
        elif keyboard_event.key == SHOW:
            tile.set_visible(True)
        elif keyboard_event.key == HIDE:
            tile.set_visible(False)
        else:
            print(f"WARNING: unrecognised (and unhandled) key '{keyboard_event.key}'")
            break

    # Update the plot.
    axis.figure.canvas.draw()


def wait_for_exit(figure):
    """Stall in a loop while waiting for the given figure to be closed.

    The function create a new connection listening to `'close_event'`. It waits
    for such event inside a loop that keeps calling `matplotlib.pyplot.pause`.

    Args:
        figure: a (currently open) matplotlib.pyplot.Figure innstance.
    """
    # Create a structure with the field 'keep_running' set to True, then add
    # a callback that changes it to False when the target figure is closed.
    exit_helper = Struct(keep_running = True)
    figure.canvas.mpl_connect('close_event', lambda event: setattr(exit_helper, "keep_running", False))

    # Stall in a loop until the figure is closed. Call 'pause' to ensure that
    # figures are updated regularly.
    while exit_helper.keep_running:
        plt.pause(0.001)
